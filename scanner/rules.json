{
    "functions":["NSLog","_NSLog","_system","_popen","___fprintf_chk","___printf_chk","___snprintf_chk","___sprintf_chk","___vfprintf_chk","___vprintf_chk","___vsnprintf_chk","___vsprintf_chk","__asprintf_chk","__dprintf_chk","__fprintf_chk","__fwprintf_chk","__obstack_printf_chk","__obstack_vprintf_chk","__printf_chk","__snprintf_chk","__sprintf_chk","__swprintf_chk","__vasprintf_chk","__vdprintf_chk","__vfprintf_chk","__vfwprintf_chk","__vprintf_chk","__vsnprintf_chk","__vsprintf_chk","__vswprintf_chk","__vswprintf_l","__vwprintf_chk","__wprintf_chk","_asprintf","_fprintf","_fscanf","_fwprintf","_gets","_mbscat","_mbscat_s","_mbscat_s_l","_mbscpy","_mbscpy_s","_mbscpy_s_l","_memcpy","_memcpy_s","_memmove","_memmove_s","_objc_msgSend","_objc_msgSend@PLT","_printf","_scanf","_snprintf","_snprintf","_sprintf","_sprintf_p_l","_sscanf","_strcat","_strcat_s","_strcpy","_strcpy_s","_strncat","_strncpy","_swprintf","_vcprintf","_vcprintf_l","_vcprintf_p","_vcprintf_p_l","_vcwprintf","_vcwprintf_l","_vcwprintf_p","_vcwprintf_p_l","_vcwprintf_s","_vcwprintf_s_l","_vfprintf","_vfprintf_l","_vfprintf_p","_vfprintf_p_l","_vfprintf_s","_vfprintf_s_l","_vfscanf","_vfscanf_s","_vfwprintf","_vfwprintf_l","_vfwprintf_p","_vfwprintf_p_l","_vfwprintf_s","_vfwprintf_s_l","_vfwscanf","_vfwscanf_s","_vprintf","_vprintf_l","_vprintf_p","_vprintf_p_l","_vprintf_s","_vprintf_s_l","_vscanf","_vscanf_s","_vscprintf","_vscprintf_l","_vscprintf_p","_vscprintf_p_l","_vscwprintf","_vscwprintf_l","_vscwprintf_p","_vscwprintf_p_l","_vsnprintf","_vsnprintf_l","_vsnprintf_s","_vsnprintf_s_l","_vsnwprintf","_vsnwprintf_l","_vsnwprintf_s","_vsnwprintf_s_l","_vsprintf","_vsprintf_l","_vsprintf_p","_vsprintf_p_l","_vsprintf_s","_vsprintf_s_l","_vsscanf","_vsscanf_s","_vswprintf","_vswprintf_l","_vswprintf_p","_vswprintf_p_l","_vswprintf_s","_vswprintf_s_l","_vswscanf","_vswscanf_s","_vwprintf","_vwprintf_l","_vwprintf_p","_vwprintf_p_l","_vwprintf_s","_vwprintf_s_l","_vwscanf","_vwscanf_s","_wcscat","_wcscat_s","_wcscpy","_wcscpy_s","_wmemcpy","_wmemcpy_s","_wmemmove","_wmemmove_s","_wpopen","_wprintf","_wsprintf","_wsprintfA","_wsprintfA@IAT","_wsprintfW","_wsprintfW@IAT","system","popen","asprintf","fprintf","fscanf","fwprintf","gets","mbscat","mbscat_s","mbscat_s_l","mbscpy","mbscpy_s","mbscpy_s_l","memcpy","memcpy_s","memmove","memmove_s","objc_msgSend","objc_msgSend@PLT","printf","scanf","snprintf","sprintf","sscanf","strcat","strcat_s","strcpy","strcpy_s","strncat","strncpy","swprintf","vasprintf","vcprintf","vcprintf_l","vcprintf_p","vcprintf_p_l","vcwprintf","vcwprintf_l","vcwprintf_p","vcwprintf_p_l","vcwprintf_s","vcwprintf_s_l","vfprintf","vfprintf_l","vfprintf_p","vfprintf_p_l","vfprintf_s","vfprintf_s_l","vfscanf","vfscanf_s","vfwprintf","vfwprintf_l","vfwprintf_p","vfwprintf_p_l","vfwprintf_s","vfwprintf_s_l","vfwscanf","vfwscanf_s","vprintf","vprintf_l","vprintf_p","vprintf_p_l","vprintf_s","vprintf_s_l","vscanf","vscanf_s","vscprintf","vscprintf_l","vscprintf_p","vscprintf_p_l","vscwprintf","vscwprintf_l","vscwprintf_p","vscwprintf_p_l","vsnprintf","vsnprintf_l","vsnprintf_s","vsnprintf_s_l","vsnwprintf","vsnwprintf_l","vsnwprintf_s","vsnwprintf_s_l","vsprintf","vsprintf_l","vsprintf_p","vsprintf_s","vsprintf_s_l","vsscanf","vsscanf_s","vswprintf","vswprintf_l","vswprintf_p","vswprintf_p_l","vswprintf_s","vswprintf_s_l","vswscanf","vswscanf_s","vwprintf","vwprintf_l","vwprintf_p","vwprintf_p_l","vwprintf_s","vwprintf_s_l","vwscanf","vwscanf_s","wcscat","wcscat_s","wcscpy","wcscpy_s","wmemcpy","wmemcpy_s","wmemmove","wmemmove_s","wpopen","wprintf","wsprintf","wsprintfA","wsprintfA@IAT","wsprintfW","wsprintfW@IAT","___memcpy_chk","___strcpy_chk","___memmove_chk"],
    "test_cases":[
        {
            "name": "Format String",
            "details": "It is possible to inject format string modifiers to the call of the function as a first parameter.",
            "functions":[
                "_printf",
                "printf",
                "vprintf",
                "_vprintf",
                "scanf",
                "_scanf",
                "vscanf",
                "_vscanf",
                "NSLog",
                "_NSLog",
                "wprintf",
                "_wprintf",
                "vwprintf",
                "_vwprintf",
                "vwscanf",
                "_vwscanf",
                "vscanf_s",
                "_vscanf_s",
                "vwscanf_s",
                "_vwscanf_s",
                "_vscprintf",
                "vscprintf",
                "_vscprintf_l",
                "vscprintf_l",
                "_vscwprintf",
                "vscwprintf",
                "_vscwprintf_l",
                "vscwprintf_l",
                "_vscprintf_p",
                "vscprintf_p",
                "_vscprintf_p_l",
                "vscprintf_p_l",
                "_vscwprintf_p",
                "vscwprintf_p",
                "_vscwprintf_p_l",
                "vscwprintf_p_l",
                "_vcprintf",
                "vcprintf",
                "_vcprintf_l",
                "vcprintf_l",
                "_vcwprintf",
                "vcwprintf",
                "_vcwprintf_l",
                "vcwprintf_l",
                "_vcprintf_p",
                "vcprintf_p",
                "_vcprintf_p_l",
                "vcprintf_p_l",
                "_vcwprintf_p",
                "vcwprintf_p",
                "_vcwprintf_p_l",
                "vcwprintf_p_l",
                "_vcwprintf_s",
                "vcwprintf_s",
                "_vcwprintf_s_l",
                "vcwprintf_s_l",
                "_vprintf_l",
                "vprintf_l",
                "_vwprintf_l",
                "vwprintf_l",
                "_vprintf_p",
                "vprintf_p",
                "_vprintf_p_l",
                "vprintf_p_l",
                "_vwprintf_p",
                "vwprintf_p",
                "_vwprintf_p_l",
                "vwprintf_p_l",
                "vprintf_s",
                "_vprintf_s",
                "_vprintf_s_l",
                "vprintf_s_l",
                "vwprintf_s",
                "_vwprintf_s",
                "_vwprintf_s_l",
                "vwprintf_s_l"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(0).source_type(\"parameter\").exported().same_branch(),sources.get().param(0).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "Medium",
                    "where":"_or_(sources.get().param(0).source_type(\"parameter\").exported(),sources.get().param(0).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"sources.get().param(0).not_constant()"
                }
            ]
        },
        {
            "name": "Format String (Objective-C)",
            "details": "It is possible to inject format string modifiers to Objective-C constructs.",
            "functions":[
                "_objc_msgSend",
                "objc_msgSend",
                "_objc_msgSend@PLT",
                "objc_msgSend@PLT"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(_and_(sources.get().param(1).constant_contains(\"alertWithMessageText\"),_or_(sources.get().param(6).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch(),sources.get().param(6).source_type(\"parameter\").exported().same_branch())),_and_(_or_(sources.get().param(1).constant_contains(\"appendFormat:\"),sources.get().param(1).constant_contains(\"stringByAppendingFormat:\"),sources.get().param(1).constant_contains(\"stringWithFormat:\")),_or_(sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch(),sources.get().param(2).source_type(\"parameter\").exported().same_branch())),_and_(sources.get().param(1).constant_contains(\"raise:format\"),_or_(sources.get().param(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch(),sources.get().param(3).source_type(\"parameter\").exported().same_branch())))"
                },
                {
                    "confidence": "Medium",
                    "where":"_or_(_and_(sources.get().param(1).constant_contains(\"alertWithMessageText\"),_or_(sources.get().param(6).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]),sources.get().param(6).source_type(\"parameter\").exported())),_and_(_or_(sources.get().param(1).constant_contains(\"appendFormat:\"),sources.get().param(1).constant_contains(\"stringByAppendingFormat:\"),sources.get().param(1).constant_contains(\"stringWithFormat:\")),_or_(sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]),sources.get().param(2).source_type(\"parameter\").exported())),_and_(sources.get().param(1).constant_contains(\"raise:format\"),_or_(sources.get().param(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]),sources.get().param(3).source_type(\"parameter\").exported())))"
                },
                {
                    "confidence": "Low",
                    "where":"_or_(_and_(sources.get().param(1).constant_contains(\"alertWithMessageText\"),sources.get().param(6).not_constant()),_and_(_or_(sources.get().param(1).constant_contains(\"appendFormat:\"),sources.get().param(1).constant_contains(\"stringByAppendingFormat:\"),sources.get().param(1).constant_contains(\"stringWithFormat:\")),sources.get().param(2).not_constant()),_and_(sources.get().param(1).constant_contains(\"raise:format\"),sources.get().param(3).not_constant()))"
                }
            ]
        },
        {
            "name": "Format String",
            "details": "It is possible to inject format string modifiers to the call of the function as a second parameter.",
            "functions":[
                "wsprintf",
                "_wsprintf",
                "wsprintfW",
                "_wsprintfW",
                "wsprintfW@IAT",
                "_wsprintfW@IAT",
                "wsprintfA",
                "_wsprintfA",
                "wsprintfA@IAT",
                "_wsprintfA@IAT",
                "fprintf",
                "_fprintf",
                "sprintf",
                "_sprintf",
                "vsprintf",
                "_vsprintf",
                "vfprintf",
                "_vfprintf",
                "sscanf",
                "_sscanf",
                "fscanf",
                "_fscanf",
                "vsscanf",
                "_vsscanf",
                "vfscanf",
                "_vfscanf",
                "fwprintf",
                "_fwprintf",
                "vfwprintf",
                "_vfwprintf",
                "_vfprintf_l",
                "vfprintf_l",
                "_vfwprintf_l",
                "vfwprintf_l",
                "_vfprintf_p",
                "asprintf",
                "_asprintf",
                "vfprintf_p",
                "_vfprintf_p_l",
                "vfprintf_p_l",
                "_vfwprintf_p",
                "vfwprintf_p",
                "_vfwprintf_p_l",
                "vfwprintf_p_l",
                "vfprintf_s",
                "_vfprintf_s",
                "_vfprintf_s_l",
                "vfprintf_s_l",
                "vfwprintf_s",
                "_vfwprintf_s",
                "_vfwprintf_s_l",
                "vfwprintf_s_l",
                "vasprintf",
                "vasprintf",
                "vfwscanf",
                "_vfwscanf",
                "vfscanf_s",
                "_vfscanf_s",
                "vfwscanf_s",
                "_vfwscanf_s",
                "_vsprintf_l",
                "vsprintf_l",
                "__vswprintf_l",
                "vswprintf",
                "_vswprintf",
                "vsprintf_s",
                "_vsprintf_s",
                "vswprintf_s",
                "_vswprintf_s",
                "vswscanf",
                "_vswscanf",
                "vsscanf_s",
                "_vsscanf_s",
                "vswscanf_s",
                "_vswscanf_s",
                "__wprintf_chk",
                "___vprintf_chk",
                "__vwprintf_chk",
                "___printf_chk",
                "__printf_chk",
                "__vprintf_chk"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "Medium",
                    "where":"_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"sources.get().param(1).not_constant()"
                }
            ]
        },
        {
            "name": "Format String",
            "details": "It is possible to inject format string modifiers to the call of the function as a third parameter.",
            "functions":[
                "vsnprintf",
                "_vsnprintf",
                "snprintf",
                "_snprintf",
                "vswprintf",
                "_vswprintf",
                "swprintf",
                "_swprintf",
                "_vsnprintf_l",
                "vsnprintf_l",
                "_vsnwprintf",
                "vsnwprintf",
                "_vsnwprintf_l",
                "vsnwprintf_l",
                "_vsnprintf_s",
                "vsnprintf_s",
                "_vsnwprintf_s",
                "vsnwprintf_s",
                "_vswprintf_l",
                "vswprintf_l",
                "_vsprintf_p",
                "vsprintf_p",
                "_vsprintf_p_l",
                "_sprintf_p_l",
                "_vswprintf_p",
                "vswprintf_p",
                "_vswprintf_p_l",
                "vswprintf_p_l",
                "vsprintf_s",
                "_vsprintf_s",
                "_vsprintf_s_l",
                "vsprintf_s_l",
                "vswprintf_s",
                "_vswprintf_s",
                "_vswprintf_s_l",
                "vswprintf_s_l",
                "__asprintf_chk", 
                "__dprintf_chk", 
                "___fprintf_chk", 
                "__fprintf_chk",
                "__fwprintf_chk", 
                "__obstack_vprintf_chk", 
                "__obstack_printf_chk", 
                "__vasprintf_chk",
                "__vdprintf_chk", 
                "___vfprintf_chk", 
                "__vfwprintf_chk",
                "__vfprintf_chk" 
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(2).source_type(\"parameter\").exported().same_branch(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "Medium",
                    "where":"_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"sources.get().param(2).not_constant()"
                }
            ]
        },
        {
            "name": "Format String",
            "details": "It is possible to inject format string modifiers to the call of the function as a fourth parameter.",
            "functions":[
                "vsnprintf_s",
                "_vsnprintf_s",
                "_vsnprintf_s_l",
                "vsnprintf_s_l",
                "_vsnwprintf_s",
                "vsnwprintf_s",
                "_vsnwprintf_s_l",
                "vsnwprintf_s_l",
                "___vsprintf_chk", 
                "___sprintf_chk",
                "__sprintf_chk", 
                "__vsprintf_chk" 
                
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(3).source_type(\"parameter\").exported().same_branch(),sources.get().param(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(3).source_type(\"parameter\").exported(),sources.get().param(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"sources.get().param(3).not_constant()"
                }
            ]
        },
        {
            "name": "Format String",
            "details": "It is possible to inject format string modifiers to the call of the function as a fifth parameter.",
            "functions":[
                "___snprintf_chk", 
                "__snprintf_chk", 
                "__swprintf_chk", 
                "___vsnprintf_chk", 
                "__vswprintf_chk", 
                "__vsnprintf_chk"
                
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(4).source_type(\"parameter\").exported().same_branch(),sources.get().param(4).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(4).source_type(\"parameter\").exported(),sources.get().param(4).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"sources.get().param(4).not_constant()"
                }
            ]
        },
        {
            "name": "Buffer Overflow (strcpy and variants)",
            "details": "Source of 'strcpy' operation can be controlled by user.",
            "functions":[
                "strcpy",
                "_strcpy",
                "wcscpy",
                "_wcscpy",
                "_mbscpy",
                "mbscpy"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Medium",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (strcat)",
            "details": "Source of 'strcat' operation can be controlled by user.",
            "functions":[
                "strcat",
                "_strcat",
                "wcscat",
                "_wcscat",
                "_mbscat",
                "mbscat"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(0).not_affected_by_function_calls([\"strlen\"]),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Medium",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(0).not_affected_by_function_calls([\"strlen\"]),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"sources.get().param(1).not_constant()"
                }
            ]
        },
        {
            "name": "Buffer Overflow (strncpy)",
            "details": "Potentially dangerous call to 'strncpy' function. Source and/or count controlled by untrusted input.",
            "functions":[
                "strncpy",
                "_strncpy"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (strncat)",
            "details": "Potentially dangerous call to 'strncat' function. Source and/or count controlled by untrusted input.",
            "functions":[
                "strncat",
                "_strncat"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (memcpy and variants)",
            "details": "Potentially dangerous call to 'memcpy' function. Source and/or count controlled by untrusted input.",
            "functions":[
                "memcpy",
                "_memcpy",
                "wmemcpy",
                "_wmemcpy"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (memmove and variants)",
            "details": "Potentially dangerous call to 'memmove' function. Source and/or count controlled by untrusted input.",
            "functions":[
                "memmove",
                "_memmove",
                "wmemmove",
                "_wmemmove"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(2).not_constant(),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (strcpy_s variants)",
            "details": "Potentially dangerous call to one of 'strcpy_s' functions. Source and/or count controlled by untrusted input.",
            "functions":[
                "strcpy_s",
                "_strcpy_s",
                "wcscpy_s",
                "_wcscpy_s",
                "_mbscpy_s",
                "mbscpy_s",
                "_mbscpy_s_l",
                "mbscpy_s_l"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported().same_branch(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Medium",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(2).not_constant(),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (strcat_s variants)",
            "details": "Potentially dangerous call to one of 'strcat_s' functions. Source and/or count controlled by untrusted input.",
            "functions":[
                "strcat_s",
                "_strcat_s",
                "wcscat_s",
                "_wcscat_s",
                "_mbscat_s",
                "mbscat_s",
                "_mbscat_s_l",
                "mbscat_s_l"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported().same_branch(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),_or_(sources.get().param(1).source_type(\"parameter\").exported().same_branch(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Medium",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),_or_(sources.get().param(1).source_type(\"parameter\").exported(),sources.get().param(1).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(2).not_affected_by_function_calls([\"strlen\",\"alloc\"]),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(2).not_constant(),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (gets)",
            "details": "The application is using function \"gets\" which could cause buffer overflow vulnerability.",
            "functions":[
                "gets",
                "_gets"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"sources.get().param(0)"
                }
            ]
        },
        {
            "name": "Buffer Overflow (scanf/fscanf)",
            "details": "The application is using function \"scanf\" which could cause buffer overflow vulnerability.",
            "functions":[
                "scanf",
                "_scanf",
                "fscanf",
                "_fscanf"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"sources.get().param(0)"
                }
            ]
        },
        {
            "name": "Buffer Overflow (sprintf)",
            "details": "Source of 'sprintf' operation can be controlled by user.",
            "functions":[
                "sprintf",
                "_sprintf"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().params_from(2).source_type(\"parameter\").exported().same_branch(),sources.get().params_from(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "Low",
                    "where":"_or_(sources.get().params_from(2).source_type(\"parameter\").exported(),sources.get().params_from(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"sources.get().params_from(2).not_constant()"
                }
            ]
        },
        {
            "name": "Buffer Overflow (memcpy_s and variants)",
            "details": "Source of 'memcpy_s' operation or its variants can be controlled by user.",
            "functions":[
                "memcpy_s",
                "_memcpy_s",
                "wmemcpy_s",
                "_wmemcpy_s"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported().same_branch(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(3).not_constant(),sources.get().param(3).not_affected_by_function_calls([\"strlen\",\"alloc\"]),sources.get().param(1).not_constant())"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_constant(),sources.get().param(3).not_constant(),sources.get().param(3).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(2).not_constant(),sources.get().param(3).not_constant(),sources.get().param(3).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (memmove_s and variants)",
            "details": "Source of 'memmove_s' operation or its variants can be controlled by user.",
            "functions":[
                "memmove_s",
                "_memmove_s",
                "wmemmove_s",
                "_wmemmove_s"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported().same_branch(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(3).not_constant(),sources.get().param(3).not_affected_by_function_calls([\"strlen\",\"alloc\"]),sources.get().param(1).not_constant())"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_constant(),sources.get().param(3).not_constant(),sources.get().param(3).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(1).not_constant(),sources.get().param(2).not_constant(),sources.get().param(3).not_constant(),sources.get().param(3).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (snprintf)",
            "details": "Source of 'snprintf' operation can be controlled by user.",
            "functions":[
                "snprintf",
                "_snprintf"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().params_from(3).source_type(\"parameter\").exported().same_branch(),sources.get().params_from(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().params_from(3).source_type(\"parameter\").exported(),sources.get().params_from(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().params_from(3).not_constant(),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\"]))"
                }
            ]
        },
        {
            "name": "Buffer Overflow (vsprintf)",
            "details": "Source of 'vsprintf' operation can be controlled by user.",
            "functions":[
                "vsprintf",
                "_vsprintf"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(2).source_type(\"parameter\").exported().same_branch(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "Low",
                    "where":"_or_(sources.get().param(2).source_type(\"parameter\").exported(),sources.get().param(2).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"sources.get().param(2).not_constant()"
                }
            ]
        },
        {
            "name": "Buffer Overflow (vsnprintf)",
            "details": "Source of and amount of data copied by 'vsnprintf' operation can be controlled by user.",
            "functions":[
                "vsnprintf",
                "_vsnprintf"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_and_(_or_(sources.get().param(3).source_type(\"parameter\").exported().same_branch(),sources.get().param(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch()),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Low",
                    "where":"_and_(_or_(sources.get().param(3).source_type(\"parameter\").exported(),sources.get().param(3).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"])),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"_and_(sources.get().param(3).not_constant(),sources.get().param(1).not_constant(),sources.get().param(1).not_affected_by_function_calls([\"strlen\",\"alloc\"]))"
                }
            ]
        },
        {
            "name": "OS Command Injection",
            "details": "Source of 'system' or 'popen' function can be controlled by user.",
            "functions":[
                "system",
                "_system",
                "_popen",
                "popen",
                "wpopen",
                "_wpopen"
            ],
            "variants":[
                {
                    "confidence": "High",
                    "where":"_or_(sources.get().param(0).source_type(\"parameter\").exported().same_branch(),sources.get().param(0).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]).same_branch())"
                },
                {
                    "confidence": "Low",
                    "where":"_or_(sources.get().param(0).source_type(\"parameter\").exported(),sources.get().param(0).function_calls([\"gets\",\"scanf\",\"fgets\",\"recv\",\"recvfrom\", \"recvmsg\",\"getc\",\"fread\",\"read\",\"sprintf\",\"memcpy\",\"strcpy\",\"strncpy\",\"getenv\"]))"
                },
                {
                    "confidence": "Info",
                    "where":"sources.get().param(0).not_constant()"
                }
            ]
        },
        {
            "name": "Potential Null Pointer Dereference",
            "details": "Possible dereference of a NULL pointer.",
            "functions":[
                "memcpy",
                "_memcpy",
                "strcpy",
                "_strcpy",
                "strncpy",
                "_strncpy",
                "memmove",
                "_memmove",
                "memmove_s",
                "_memmove_s",
                "wmemmove_s",
                "_wmemmove_s",
                "memcpy_s",
                "_memcpy_s",
                "wmemcpy_s",
                "_wmemcpy_s",
                "strcpy_s",
                "_strcpy_s",
                "wcscpy_s",
                "_wcscpy_s",
                "_mbscpy_s",
                "mbscpy_s",
                "_mbscpy_s_l",
                "mbscpy_s_l",
                "snprintf",
                "_snprintf",
                "___memcpy_chk",
                "___strcpy_chk",
                "___memmove_chk"
            ],
            "variants":[
                {
                    "confidence": "Medium",
                    "where":"sources.get().param(0).same_branch_function_call(\"alloc\")"
                }
            ]
        }
    ]
}
